Member --- Team
|
|
Order --- OrderItem --- Item---Category
|
|
Delivery

객체에서 회원이 소속된 팀을 조회할때는 참조를 사용해서 연관된 팀을 찾으면 되는데 이것을 객체 그래프 탐색이라함

Team team = member.getTeam();

member.getOrder().getOrderItem() // 자유로운 객체 그래프 탐색

객체는 마음껏 객체 그래프를 탐색 할 수 있어야함

하지만 DAO를 통해서 객체를 조회하면 객체와 연관된 방향으로 객체 그래프를 탐색할 수 있을지 없을지는 코드만 보고 예측 불가능
결국 어디까지 객체 그래프 탐색이 가능한지 알아보려면 데이터 접근 계층인 DAO를 열어서 SQL을 직접 확인해야함


JPA와 객체 그래프 탐색
JPA를 사용하면 위의 문제를 해결하고 연관된 객체를 신뢰하고 마음껏 조회할 수 있다.
앞으로 나올 기능은 실제 객체를 사용하는 시점까지 데이터베이스 조회를 미룬다고 해서 지연 로딩이라 한다.
이 기능을 사용하려면 객체에 JPA와 관련된 어떤 코드들을 심어야 하므로 JPA는 지연 로딩을 투명하게 처리함

예제
//처음 조회 시점에 SELECT MEMBER SQL
Member member = jpa.find(Member.class,memberId);

Order order = member.getOrder();
order.getOrderDate(); //Order를 사용하는 시점에 SELECT ORDER SQL

Member를 사용할때마다 Order를 함께 사용하면 이렇게 한 테이블씩 조회하는 것보다 Member를 조회하는 시점에 SQL 조인을 사용해서 Member와 Order를 함께 조회하는 것이 효과적이다.

JPA는 연관된 객체를 즉시 조회할지 아니면 사용 시점에 지연해서 조회할지 간단한 설정으로 정의 할 수 있음

