JPA는 상속과 관련된 패러다임의 불일치 문제를 개발자 대신 해결해줌
개발자는 JPA에게 객체를 저장하면 된다
JPA를 사용해서 Item을 상속한 Album객체를 저장해보자 persist() 메소드를 사용해 객체 저장하면 됨
jpa.persist(album);

그러면 JPA는 다음 sql을 실행해서 객체를 ITEM,ALBUM 두 테이블에 나누어 저장함
INSERT INTO ITEM...
INSERT INTO ALBUM...

다음으로 ALbum객체를 조회 find()메소드를 사용
String albumId = "id100";
Album album = jpa.find(Album.class,albumId);
이러면 JPA는 ITEM과 AlBUM 두 테이블에 조인해서 필요한 데이터를 조회하고 결과를 반환
SELECT I.* , A.*
	FROM ITEM I
	JOIN ALBUM A ON I.ITEM_ID = A.ITEM_ID


저장
객체를 데이터베이스에 저장하려면 team 필드를 TEAM_ID 외래 키 값으로 변한해야한다
외래 키 값을 찾아서 INSERT SQL을 만들어야 하므로 MEMBER 테이블에 저장해야 할 TEAM_ID 외래 키는 TEAM 테이블의 기본 키 이므로 member.getTeam().getID() 로 구할 수 있음
member.getID() // MEMBER_ID PK에 저장
member.getTeam().getID() // Team_ID FK에 저장
member.getUserName(); // USERNAME 컬럼에 저장

조회
조회할 때는 TEAM_ID 외래 키 값을 Member 객체의 team 참조로 변환해서 객체에 보관해야함
SELECT M.* , T.*
	FROM ITEM M
	JOIN ALBUM T ON M.TEAM_ID = T.TEAM_ID


개발자가 직접 연관관계 설정
public Member find(String memberID){
SQL 실행//

Member member = new Member();
//데이터베이스에서 조회한 회원 관련 정보를 모두 입력


Team team = new Team();
//데이터베이스에서 조회한 팀 관련 정보를 모두 입력


//
회원과 팀 관계 설정
member.setTeam(team); // 회원과 팀 연관관계 설정
return member; 
}

jpa.persist(member) //회원과 연관관계 함께 저장

개발자는 회원과 팀의 관계를 설정하고 회원 객체를 저장하면 됨 
JPA는 team의 참조를 외래 키로 변환해서 적절한 INSERT SQL을 데이터베이스에 전달함
객체를 조회할때 외래 키를 참조로 변환하는 일도 JPA가 해줌

Member member = jpa.find(Member.class , memberId);
Team team = member.getTeam();
